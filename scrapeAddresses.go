// This is a script to scrape all of the addresses that deposited and remove duplicates.
package main

import (
	"encoding/csv"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
)

type AutoGenerated struct {
	Status  string `json:"status"`
	Message string `json:"message"`
	Result  []struct {
		BlockNumber       string `json:"blockNumber"`
		TimeStamp         string `json:"timeStamp"`
		Hash              string `json:"hash"`
		Nonce             string `json:"nonce"`
		BlockHash         string `json:"blockHash"`
		From              string `json:"from"`
		ContractAddress   string `json:"contractAddress"`
		To                string `json:"to"`
		Value             string `json:"value"`
		TokenName         string `json:"tokenName"`
		TokenSymbol       string `json:"tokenSymbol"`
		TokenDecimal      string `json:"tokenDecimal"`
		TransactionIndex  string `json:"transactionIndex"`
		Gas               string `json:"gas"`
		GasPrice          string `json:"gasPrice"`
		GasUsed           string `json:"gasUsed"`
		CumulativeGasUsed string `json:"cumulativeGasUsed"`
		Input             string `json:"input"`
		Confirmations     string `json:"confirmations"`
	} `json:"result"`
}

func removeDuplicateValues(intSlice []string) []string {
	keys := make(map[string]bool)
	list := []string{}

	// If the key(values of the slice) is not equal
	// to the already present value in new slice (list)
	// then we append it. else we jump on another element.
	for _, entry := range intSlice {
		if _, value := keys[entry]; !value {
			keys[entry] = true
			list = append(list, entry)
		}
	}
	return list
}

func main() {
	// Snowtrace API pull to get all addresses that sent in mim to the address.
	resp, err := http.Get("https://api.snowtrace.io/api?module=account&action=tokentx&address=0x9d7ea54c0394de3c0dd28345f97e475a4778d0a9&sort=asc")
	if err != nil {
		panic("No response from request")
	}

	defer resp.Body.Close()
	byteValue, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	var jsonResp AutoGenerated

	json.Unmarshal(byteValue, &jsonResp)

	var addresses []string

	for i := 0; i < len(jsonResp.Result); i++ {

		if jsonResp.Result[i].ContractAddress == "0x130966628846bfd36ff31a822705796e8cb8c18d" && jsonResp.Result[i].To == "0x9d7ea54c0394de3c0dd28345f97e475a4778d0a9" {
			addresses = append(addresses, jsonResp.Result[i].From)
		}

	}

	addresses = removeDuplicateValues(addresses)

	csvFile, err := os.Create("addresses.csv")
	if err != nil {
		log.Fatalf("Failed creating file: %s", err)
	}
	csvwriter := csv.NewWriter(csvFile)
	csvwriter.Write(addresses)
	csvwriter.Flush()
	csvFile.Close()

	log.Println("Total Scraped Addresses: ", len(addresses))

}
